-Frequently, you’ll find that during the lifetime of your variable, it only ever needs to refer to one object.
 Then, you can declare it with val (for “value”).

-The terminology is that var declares a mutable variable, and that val declares a read-only or assign-once variable - so both kinds are called variables.

-Type 	Bits 	Min value 	            Max value
 Long 	64 	    -9223372036854775808 	9223372036854775807
 Int 	32 	    -2147483648 	        2147483647
 Short 	16 	    -32768 	                32767
 Byte 	8 	    -128 	                127


-val result = if (condition) trueBody else falseBody

-Collections

 Arrays in Kotlin have a constant length, so one normally uses lists, which are similar to the ones in Python.
 What’s called a dict in Python is called a map in Kotlin (not to be confused with the function map()).
 List, Map, and Set are all interfaces which are implemented by many different classes.

-The while loop is similar to Python (but keep in mind that the condition must be an actual boolean
 expression, as there’s no concept of truthy or falsy values).

-A plain continue or break works the same way as in Python: continue skips to the next iteration of
 the innermost containing loop, and break stops the loop.

-The vararg keyword, which allows you to declare a function taking an arbitrary number of arguments

-A function declared inside a class is called a member function of that class.
-functions in Kotlin are first-class Citizens

-Visibility modifiers
 public (or omitted): this symbol is visible throughout the entire codebase
 internal: this symbol is only visible inside files that belong to the same module (a source code grouping which is defined by your IDE or build tool) as the file where this symbol is declared
 private: this symbol is only visible inside the file where this symbol is declared
 protected: this symbol is only visible inside the containing class and all of its subclasses, no matter where they are declared (so if your class is public and open, anyone can subclass it and thus get to see and use the protected members). If you have used Java: this does not also grant access from the rest of the package.

-Functional and object-oriented
 As a Java developer, you’re no doubt familiar with the core concepts of object-oriented
 programming, but functional programming may be new to you. The key concepts of
 functional programming are as follows:

  First-class functions—You work with functions (pieces of behavior) as values. You
 can store them in variables, pass them as parameters, or return them from
 other functions.

  Immutability—You work with immutable objects, which guarantees that their
 state can’t change after their creation.

  No side effects—You use pure functions that return the same result given the
 same inputs and don’t modify the state of other objects or interact with the outside world.

- val (from value)—Immutable reference. A variable declared with val can’t be
 reassigned after it’s initialized. It corresponds to a final variable in Java.

  var (from variable)—Mutable reference. The value of such a variable can be
 changed. This declaration corresponds to a regular (non-final) Java variable.

-an extension function is a simple thing: it’s a function that can be
 called as a member of a class but is defined outside of it.

